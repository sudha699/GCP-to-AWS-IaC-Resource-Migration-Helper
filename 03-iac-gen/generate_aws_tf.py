import os
import sys
import csv
import requests
import json


# This script takes the AWS service mapping CSV and uses the Gemini API
# to generate the Terraform HCL for the AWS resources.

# --- Configuration ---
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")
GEMINI_API_ENDPOINT = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key="

def call_gemini(prompt):
    """
    Calls the Gemini API with a given prompt and returns the response.
    """
    if not GEMINI_API_KEY:
        raise ValueError("GEMINI_API_KEY environment variable not set.")

    headers = {"Content-Type": "application/json"}
    url = f"{GEMINI_API_ENDPOINT}{GEMINI_API_KEY}"
    
    data = {
        "contents": [
            {
                "parts": [
                    {"text": prompt}
                ]
            }
        ]
    }
    
    try:
        response = requests.post(url, headers=headers, json=data)
        response.raise_for_status()
        
        return response.json()['candidates'][0]['content']['parts'][0]['text']
    except requests.exceptions.RequestException as e:
        print(f"Error calling Gemini API: {e}", file=sys.stderr)
        return None

def main(input_csv_file, output_tf_file):
    """
    Main function to read the mapping, call Gemini, and write the Terraform code.
    """
    if not os.path.exists(input_csv_file):
        print(f"Input CSV file not found: {input_csv_file}", file=sys.stderr)
        sys.exit(1)
    
    print(f"[*] Reading service mapping from: {input_csv_file}")
    with open(input_csv_file, 'r', newline='') as csvfile:
        reader = csv.DictReader(csvfile)
        mappings = list(reader)

    if not mappings:
        print("[!] No mappings found in the CSV. Exiting.", file=sys.stderr)
        sys.exit(0)

    all_terraform_code = []

    print("[*] Generating Terraform code for each resource...")
    for row in mappings:
        gcp_resource = row.get('GCP_Resource', 'Unknown')
        aws_equivalent = row.get('AWS_Equivalent_Service', 'Unknown')
        details = row.get('Details', '')

        if gcp_resource == 'Unknown' or aws_equivalent == 'Unknown':
            continue

        prompt = (
            f"You are an expert cloud architect and a Terraform HCL specialist. "
            f"Based on the following GCP resource and its equivalent AWS service, "
            f"provide a Terraform HCL code snippet for the AWS resource. "
            f"Do not include comments, descriptions, or a complete file, just the resource block. "
            f"GCP Resource: '{gcp_resource}' "
            f"Equivalent AWS Service: '{aws_equivalent}' "
            f"Details: '{details}'"
        )
        
        print(f"  > Generating Terraform for: {gcp_resource}")
        gemini_response = call_gemini(prompt)

        if gemini_response:
            all_terraform_code.append(gemini_response.strip())
        else:
            print(f"[!] Failed to generate Terraform for {gcp_resource}. Skipping.", file=sys.stderr)
    
    # --- ADDED CODE TO CREATE OUTPUT DIRECTORY ---
    output_dir = os.path.dirname(output_tf_file)
    if output_dir:
        os.makedirs(output_dir, exist_ok=True)
    # ---------------------------------------------

    print(f"[*] Writing generated Terraform to: {output_tf_file}")
    with open(output_tf_file, 'w') as f:
        f.write("# This Terraform code was automatically generated by the GCP-to-AWS IaC Migration Helper.\n")
        f.write("# Please review and customize before applying.\n\n")
        f.write("terraform {\n")
        f.write("  required_providers {\n")
        f.write("    aws = {\n")
        f.write("      source  = \"hashicorp/aws\"\n")
        f.write("      version = \"~> 5.0\"\n")
        f.write("    }\n")
        f.write("  }\n")
        f.write("}\n\n")
        f.write("provider \"aws\" {\n")
        f.write("  region = \"us-east-1\" # Customize your region here\n")
        f.write("}\n\n")
        f.write('\n'.join(all_terraform_code))

    print(f"[âœ“] Terraform code saved to: {output_tf_file}")

if __name__ == "__main__":
    if len(sys.argv) < 3:
        print("Usage: python3 generate_aws_tf.py <AWS_MAPPING_CSV> <OUTPUT_TF_FILE>")
        sys.exit(1)
    
    input_file = sys.argv[1]
    output_file = sys.argv[2]
    main(input_file, output_file)


